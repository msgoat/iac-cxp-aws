keycloak:
  init:
    image:
      repository: busybox
      tag: 1.31
      pullPolicy: IfNotPresent
    resources: {}
  clusterDomain: cxp.k8s.aws.msgoat.eu
  keycloak:
    replicas: 1
    image:
      repository: jboss/keycloak
      tag: 9.0.2
      pullPolicy: IfNotPresent
      pullSecrets: []
    hostAliases: []
    enableServiceLinks: false
    podManagementPolicy: Parallel
    restartPolicy: Always
    serviceAccount:
      create: true
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name:
    securityContext:
      fsGroup: 1000
    containerSecurityContext:
      runAsUser: 1000
      runAsNonRoot: true
    basepath: auth
    ## Additional init containers, e. g. for providing custom themes
    extraInitContainers: |
    ## Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
    extraContainers: |
    ## lifecycleHooks defines the container lifecycle hooks
    lifecycleHooks: |
      # postStart:
      #   exec:
      #     command: ["/bin/sh", "-c", "ls"]
    ## Additional arguments to start command e.g. -Dkeycloak.import= to load a realm
    extraArgs: ""
    ## Username for the initial Keycloak admin user
    username: keycloak-admin
    ## Password for the initial Keycloak admin user. Applicable only if existingSecret is not set.
    ## If not set, a random 10 characters password will be used
    password: ""
    # Specifies an existing secret to be used for the admin password
    existingSecret: "sys-iam-bootstrap-keycloak-admin"
    # The key in the existing secret that stores the password
    existingSecretKey: admin-password
    ## jGroups configuration (only for HA deployment)
    jgroups:
      discoveryProtocol: dns.DNS_PING
      discoveryProperties: >
        "dns_query={{ template "keycloak.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    ## Allows the specification of additional environment variables for Keycloak
    extraEnv: |
      # - name: KEYCLOAK_LOGLEVEL
      #   value: DEBUG
      # - name: WILDFLY_LOGLEVEL
      #   value: DEBUG
      # - name: CACHE_OWNERS
      #   value: "2"
      # - name: DB_QUERY_TIMEOUT
      #   value: "60"
      # - name: DB_VALIDATE_ON_MATCH
      #   value: true
      # - name: DB_USE_CAST_FAIL
      #   value: false

    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 10 }}
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: kubernetes.io/hostname
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "keycloak.selectorLabels" . | nindent 12 }}
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: failure-domain.beta.kubernetes.io/zone
    nodeSelector: {}
    priorityClassName: ""
    tolerations: []
    ## Additional pod labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
    ## Extra Annotations to be added to pod
    podAnnotations: {}
    livenessProbe: |
      httpGet:
        path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
        port: http
      initialDelaySeconds: 300
      timeoutSeconds: 5
    readinessProbe: |
      httpGet:
        path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 1
    resources:
      limits:
        memory: "1024Mi"
      requests:
        cpu: "100m"
        memory: "1024Mi"
    ## WildFly CLI configurations. They all end up in the file 'keycloak.cli' configured in the configmap which is
    ## executed on server startup.
    cli:
      enabled: true
      nodeIdentifier: |
        {{ .Files.Get "scripts/node-identifier.cli" }}
      logging: |
        {{ .Files.Get "scripts/logging.cli" }}
      ha: |
        {{ .Files.Get "scripts/ha.cli" }}
      datasource: |
        {{ .Files.Get "scripts/datasource.cli" }}
      # Custom CLI script
      custom: |
    ## Custom startup scripts to run before Keycloak starts up
    startupScripts: {}
    ## Add additional volumes and mounts, e. g. for custom themes
    extraVolumes: |
    extraVolumeMounts: |
    ## Add additional ports, eg. for custom admin console
    extraPorts: |
    podDisruptionBudget:
      minAvailable: 1
    service:
      annotations: {}
      labels: {}
      type: ClusterIP
      httpPort: 80
      httpNodePort: ""
      httpsPort: 8443
      httpsNodePort: ""
      # Optional: jGroups port for high availability clustering
      jgroupsPort: 7600
    ingress:
      enabled: true
      path: /auth
      annotations:
        kubernetes.io/ingress.class: traefik
      labels: {}
      hosts:
        - iam.cxp.k8s.aws.msgoat.eu
      tls: []
    route:
      enabled: false
    persistence:
      # If true, the Postgres chart is deployed
      deployPostgres: false
      # The database vendor. Can be either "postgres", "mysql", "mariadb", or "h2"
      dbVendor: postgres
      ## The following values only apply if "deployPostgres" is set to "false"
      dbName: keycloak_db
      dbHost: sys-iam-postgresql
      dbPort: 5432

      ## Database Credentials are loaded from a Secret residing in the same Namespace as keycloak.
      ## The Chart can read credentials from an existing Secret OR it can provision its own Secret.

      ## Specify existing Secret
      # If set, specifies the Name of an existing Secret to read db credentials from.
      existingSecret: "sys-iam-bootstrap-postgres-admin"
      existingSecretPasswordKey: "postgresql-password"  # read keycloak db password from existingSecret under this Key
      existingSecretUsernameKey: "postgresql-user"  # read keycloak db user from existingSecret under this Key

  test:
    enabled: false

postgresql:
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry and imagePullSecrets
  ##
  global:
    postgresql: {}
  #   imageRegistry: myRegistryName
  #   imagePullSecrets:
  #     - myRegistryKeySecretName
  #   storageClass: myStorageClass

  ## Bitnami PostgreSQL image version
  ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
  ##
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.7.0-debian-10-r73
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

    ## Set to true if you would like to see extra information on logs
    ## It turns BASH and NAMI debugging in minideb
    ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging
    debug: false

  ## String to partially override postgresql.fullname template (will maintain the release name)
  ##
  # nameOverride:

  ## String to fully override postgresql.fullname template
  ##
  # fullnameOverride:

  ##
  ## Init containers parameters:
  ## volumePermissions: Change the owner of the persist volume mountpoint to RunAsUser:fsGroup
  ##
  volumePermissions:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/minideb
      tag: buster
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: Always
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ##
      # pullSecrets:
      #   - myRegistryKeySecretName
    ## Init container Security Context
    ## Note: the chown of the data folder is done to securityContext.runAsUser
    ## and not the below volumePermissions.securityContext.runAsUser
    ## When runAsUser is set to special value "auto", init container will try to chwon the
    ## data folder to autodetermined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
    ## "auto" is especially useful for OpenShift which has scc with dynamic userids (and 0 is not allowed).
    ## You may want to use this volumePermissions.securityContext.runAsUser="auto" in combination with
    ## pod securityContext.enabled=false and shmVolume.chmod.enabled=false
    ##
    securityContext:
      runAsUser: 0

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:


  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001

  ## Pod Service Account
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccount:
    enabled: false
    ## Name of an already existing service account. Setting this value disables the automatic service account creation.
    # name:

  replication:
    enabled: false

  ## PostgreSQL admin password (used when `postgresqlUsername` is not `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-user-on-first-run (see note!)
  # postgresqlPostgresPassword:

  ## PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: postgres

  ## PostgreSQL password
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  # postgresqlPassword: ""

  ## PostgreSQL password using existing secret
  existingSecret: "sys-iam-bootstrap-postgres-admin"

  ## Mount PostgreSQL secret as a file instead of passing environment variable
  # usePasswordFile: false

  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: keycloak_db

  ## PostgreSQL data dir
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
  ##
  postgresqlDataDir: /bitnami/postgresql/data

  ## An array to add extra environment variables
  ## For example:
  ## extraEnv:
  ##   - name: FOO
  ##     value: "bar"
  ##
  # extraEnv:
  extraEnv: {}

  ## Name of a ConfigMap containing extra env vars
  ##
  # extraEnvVarsCM:

  ## Specify extra initdb args
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
  ##
  # postgresqlInitdbArgs:

  ## Specify a custom location for the PostgreSQL transaction log
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
  ##
  # postgresqlInitdbWalDir:

  ## PostgreSQL configuration
  ## Specify runtime configuration parameters as a dict, using camelCase, e.g.
  ## {"sharedBuffers": "500MB"}
  ## Alternatively, you can put your postgresql.conf under the files/ directory
  ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
  ##
  # postgresqlConfiguration:

  ## PostgreSQL extended configuration
  ## As above, but _appended_ to the main configuration
  ## Alternatively, you can put your *.conf under the files/conf.d/ directory
  ## https://github.com/bitnami/bitnami-docker-postgresql#allow-settings-to-be-loaded-from-files-other-than-the-default-postgresqlconf
  ##
  # postgresqlExtendedConf:

  ## PostgreSQL client authentication configuration
  ## Specify content for pg_hba.conf
  ## Default: do not create pg_hba.conf
  ## Alternatively, you can put your pg_hba.conf under the files/ directory
  # pgHbaConfiguration: |-
  #   local all all trust
  #   host all all localhost trust
  #   host mydatabase mysuser 192.168.0.0/24 md5

  ## ConfigMap with PostgreSQL configuration
  ## NOTE: This will override postgresqlConfiguration and pgHbaConfiguration
  # configurationConfigMap:

  ## ConfigMap with PostgreSQL extended configuration
  # extendedConfConfigMap:

  ## initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  ## Alternatively, you can put your scripts under the files/docker-entrypoint-initdb.d directory
  ##
  # initdbScripts:
  #   my_init_script.sh: |
  #      #!/bin/sh
  #      echo "Do something."

  ## ConfigMap with scripts to be run at first boot
  ## NOTE: This will override initdbScripts
  # initdbScriptsConfigMap:

  ## Secret with scripts to be run at first boot (in case it contains sensitive information)
  ## NOTE: This can work along initdbScripts or initdbScriptsConfigMap
  # initdbScriptsSecret:

  ## Specify the PostgreSQL username and password to execute the initdb scripts
  # initdbUser:
  # initdbPassword:

  ## Optional duration in seconds the pod needs to terminate gracefully.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  # terminationGracePeriodSeconds: 30

  ## LDAP configuration
  ##
  ldap:
    enabled: false

  ## PostgreSQL service configuration
  service:
    ## PosgresSQL service type
    type: ClusterIP
    # clusterIP: None
    port: 5432

    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:

    ## Provide any additional annotations which may be required.
    ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
    annotations: {}
    ## Set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    # loadBalancerIP:

    ## Load Balancer sources
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ##
    # loadBalancerSourceRanges:
    # - 10.10.10.0/24

  ## Start master and slave(s) pod(s) without limitations on shm memory.
  ## By default docker and containerd (and possibly other container runtimes)
  ## limit `/dev/shm` to `64M` (see e.g. the
  ## [docker issue](https://github.com/docker-library/postgres/issues/416) and the
  ## [containerd issue](https://github.com/containerd/containerd/issues/3654),
  ## which could be not enough if PostgreSQL uses parallel workers heavily.
  ##
  shmVolume:
    ## Set `shmVolume.enabled` to `true` to mount a new tmpfs volume to remove
    ## this limitation.
    ##
    enabled: true
    ## Set to `true` to `chmod 777 /dev/shm` on a initContainer.
    ## This option is ingored if `volumePermissions.enabled` is `false`
    ##
    chmod:
      enabled: true

  ## PostgreSQL data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## If defined, PVC must be created manually before volume will be bound
    ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
    ##
    # existingClaim:

    ## The path the volume will be mounted at, useful when using different
    ## PostgreSQL images.
    ##
    mountPath: /bitnami/postgresql

    ## The subdirectory of the volume to mount to, useful in dev environments
    ## and one PV for multiple services.
    ##
    subPath: ""

    storageClass: "gp2"
    accessModes:
      - ReadWriteOnce
    size: 200Mi
    annotations: {}

  ## updateStrategy for PostgreSQL StatefulSet and its slaves StatefulSets
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  updateStrategy:
    type: RollingUpdate

  ##
  ## PostgreSQL Master parameters
  ##
  master:
    ## Node, affinity, tolerations, and priorityclass settings for pod assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
    ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption
    nodeSelector: {}
    affinity: {}
    tolerations: []
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    priorityClassName: ""
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']

    ## Additional PostgreSQL Master Volume mounts
    ##
    extraVolumeMounts: []
    ## Additional PostgreSQL Master Volumes
    ##
    extraVolumes: []
    ## Add sidecars to the pod
    ##
    ## For example:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    sidecars: []

  ##
  ## PostgreSQL Slave parameters
  ##
  slave:
    ## Node, affinity, tolerations, and priorityclass settings for pod assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
    ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption
    nodeSelector: {}
    affinity: {}
    tolerations: []
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    priorityClassName: ""
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
    ## Additional PostgreSQL Slave Volume mounts
    ##
    extraVolumeMounts: []
    ## Additional PostgreSQL Slave Volumes
    ##
    extraVolumes: []
    ## Add sidecars to the pod
    ##
    ## For example:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    sidecars: []

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi

  networkPolicy:
    ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
    ##
    enabled: true

    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the port PostgreSQL is listening
    ## on. When true, PostgreSQL will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true

      ## if explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
      ## and that match other criteria, the ones that have the good label, can reach the DB.
      ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
      ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
      ##
      # explicitNamespacesSelector:
      # matchLabels:
      # role: frontend
    # matchExpressions:
    # - {key: role, operator: In, values: [frontend]}

  ## Configure extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  ## Configure metrics exporter
  ##
  metrics:
    enabled: false
