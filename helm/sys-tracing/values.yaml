# Default values for jaeger.
# This is a YAML-formatted file.
# Jaeger values are grouped by component. Cassandra values override subchart values

jaeger:

  provisionDataStore:
    cassandra: false
    elasticsearch: true
    kafka: false

  tag: 1.18.0

  nameOverride: ""
  fullnameOverride: ""

  storage:
    # allowed values (cassandra, elasticsearch)
    type: elasticsearch
    elasticsearch:
      scheme: http
      host: sys-tracing-elasticsearch-master
      port: 9200
      user: elastic
      usePassword: false
      password: changeme
      # indexPrefix: test
      ## Use existing secret (ignores previous password)
      # existingSecret:
      # existingSecretKey:
      nodesWanOnly: false
      env: {}
        ## ES related env vars to be configured on the concerned components
        # ES_SERVER_URLS: http://elasticsearch-master:9200
        # ES_USERNAME: elastic
      # ES_INDEX_PREFIX: test
      ## ES related cmd line opts to be configured on the concerned components
      cmdlineParams: {}
        # es.server-urls: http://elasticsearch-master:9200
        # es.username: elastic
      # es.index-prefix: test

  # For configurable values of the elasticsearch if provisioned, please see:
  # https://github.com/elastic/helm-charts/tree/master/elasticsearch#configuration
  elasticsearch:
    clusterName: "sys-tracing-elasticsearch"
    nodeGroup: "master"
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss"
    imageTag: "7.6.2"
    imagePullPolicy: "IfNotPresent"
    esJavaOpts: "-Xmx1g -Xms1g"
    resources:
      requests:
        cpu: "500m"
        memory: "2Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    networkHost: "0.0.0.0"
    volumeClaimTemplate:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
    rbac:
      create: true
    podSecurityPolicy:
      create: true
    persistence:
      enabled: true
    # By default this will make sure two pods don't end up on the same node
    # Changing this to a region would allow you to spread pods across regions
    # @TODO: add spread across availability zones
    antiAffinityTopologyKey: "kubernetes.io/hostname"
    # Hard means that by default pods will only be scheduled if there are enough nodes for them
    # and that they will never end up on the same node. Setting this to soft will do this "best effort"
    antiAffinity: "hard"
    # The default is to deploy all pods serially. By setting this to parallel all pods are started at
    # the same time when bootstrapping the cluster
    podManagementPolicy: "Parallel"
    updateStrategy: RollingUpdate
    # This is the max unavailable setting for the pod disruption budget
    # The default value of 1 will make sure that kubernetes won't allow more than 1
    # of your pods to be unavailable during maintenance
    maxUnavailable: 1
    sysctlVmMaxMapCount: 262144
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 3
      timeoutSeconds: 5
    # Enabling this will publically expose your Elasticsearch instance.
    # Only enable this if you have security enabled on your cluster
    ingress:
      enabled: false
    # https://github.com/elastic/helm-charts/issues/63
    masterTerminationFix: false
    sysctlInitContainer:
      enabled: true

  ingester:
    enabled: false

  agent:
    podSecurityContext: {}
    securityContext: {}
    enabled: true
    annotations: {}
    image: jaegertracing/jaeger-agent
    pullPolicy: IfNotPresent
    cmdlineParams: {}
    env: {}
    daemonset:
      useHostPort: false
    service:
      annotations: {}
      # List of IP ranges that are allowed to access the load balancer (if supported)
      loadBalancerSourceRanges: []
      type: ClusterIP
      # zipkinThriftPort :accept zipkin.thrift over compact thrift protocol
      zipkinThriftPort: 5775
      # compactPort: accept jaeger.thrift over compact thrift protocol
      compactPort: 6831
      # binaryPort: accept jaeger.thrift over binary thrift protocol
      binaryPort: 6832
      # samplingPort: (HTTP) serve configs, sampling strategies
      samplingPort: 5778
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 256m
        memory: 128Mi
    serviceAccount:
      create: true
      name:
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    ## Additional pod labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
    extraSecretMounts: []
    # - name: jaeger-tls
    #   mountPath: /tls
    #   subPath: ""
    #   secretName: jaeger-tls
    #   readOnly: true
    extraConfigmapMounts: []
    # - name: jaeger-config
    #   mountPath: /config
    #   subPath: ""
    #   configMap: jaeger-config
    #   readOnly: true
    useHostNetwork: false
    dnsPolicy: ClusterFirst
    priorityClassName: ""

    serviceMonitor:
      enabled: false
      additionalLabels: {}

  collector:
    podSecurityContext: {}
    securityContext: {}
    enabled: true
    annotations: {}
    image: jaegertracing/jaeger-collector
    pullPolicy: IfNotPresent
    dnsPolicy: ClusterFirst
    cmdlineParams: {}
    env: {}
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    service:
      annotations: {}
      # List of IP ranges that are allowed to access the load balancer (if supported)
      loadBalancerSourceRanges: []
      type: ClusterIP
      grpc:
        port: 14250
        # nodePort:
      # httpPort: can accept spans directly from clients in jaeger.thrift format
      http:
        port: 14268
        # nodePort:
      # can accept Zipkin spans in JSON or Thrift
      zipkin: {}
        # port: 9411
      # nodePort:
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    serviceAccount:
      create: true
      name:
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    ## Additional pod labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
    extraSecretMounts: []
    # - name: jaeger-tls
    #   mountPath: /tls
    #   subPath: ""
    #   secretName: jaeger-tls
    #   readOnly: true
    extraConfigmapMounts: []
    # - name: jaeger-config
    #   mountPath: /config
    #   subPath: ""
    #   configMap: jaeger-config
    #   readOnly: true
    # samplingConfig: |-
    #   {
    #     "service_strategies": [
    #       {
    #         "service": "foo",
    #         "type": "probabilistic",
    #         "param": 0.8,
    #         "operation_strategies": [
    #           {
    #             "operation": "op1",
    #             "type": "probabilistic",
    #             "param": 0.2
    #           },
    #           {
    #             "operation": "op2",
    #             "type": "probabilistic",
    #             "param": 0.4
    #           }
    #         ]
    #       },
    #       {
    #         "service": "bar",
    #         "type": "ratelimiting",
    #         "param": 5
    #       }
    #     ],
    #     "default_strategy": {
    #       "type": "probabilistic",
    #       "param": 1
    #     }
    #   }
    serviceMonitor:
      enabled: false
      additionalLabels: {}

  query:
    enabled: true
    podSecurityContext: {}
    securityContext: {}
    agentSidecar:
      enabled: true
    annotations: {}
    image: jaegertracing/jaeger-query
    pullPolicy: IfNotPresent
    dnsPolicy: ClusterFirst
    cmdlineParams: {}
    env: {}
    replicaCount: 1
    service:
      annotations: {}
      type: ClusterIP
      # List of IP ranges that are allowed to access the load balancer (if supported)
      loadBalancerSourceRanges: []
      port: 80
      # Specify a specific node port when type is NodePort
      # nodePort: 32500
    ingress:
      enabled: true
      hosts:
        - jaeger.cxp.k8s.aws.msgoat.eu
      annotations: {}
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 256m
        memory: 128Mi
    serviceAccount:
      create: true
      name:
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations: {}
    ## Additional pod labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
    extraConfigmapMounts: []
    # - name: jaeger-config
    #   mountPath: /config
    #   subPath: ""
    #   configMap: jaeger-config
    #   readOnly: true
    serviceMonitor:
      enabled: false
      additionalLabels: {}

  esIndexCleaner:
    enabled: true
    securityContext:
      runAsUser: 1000
    podSecurityContext:
      runAsUser: 1000
    annotations: {}
    image: jaegertracing/jaeger-es-index-cleaner
    tag: latest
    pullPolicy: Always
    cmdlineParams: {}
    schedule: "55 23 * * *"
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 3
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 256m
        memory: 128Mi
    nudmberOfDays: 7
    serviceAccount:
      create: true
      name:
    nodeSelector: {}
    tolerations: []
    affinity: {}
    extraSecretMounts: []
    extraConfigmapMounts: []
    podAnnotations: {}
    ## Additional pod labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
  # End: Default values for the various components of Jaeger
